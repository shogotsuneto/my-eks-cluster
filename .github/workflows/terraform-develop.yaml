# copied from official tutorial and modified
# https://github.com/hashicorp/learn-terraform-github-actions/blob/48052f810e751fc890454121843449ccdf8d5b1b/.github/workflows/terraform.yml

name: "Terraform Develop Cluster"

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  id-token: write

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: clusters/develop
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ap-northeast-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@v5
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.MY_PAT }}
            # Repo permission will do
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve

  mapUsers:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    name: Map Users
    needs: terraform
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: clusters/develop
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ap-northeast-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Retrieve Terraform outputs
        id: terraform-outputs
        run: |
          echo "::set-output name=create::$(terraform-bin output -json | jq -r '.create.value')"
          echo "::set-output name=cluster_id::$(terraform-bin output -json | jq -r '.cluster_id.value')"
          echo "::set-output name=aws_auth_configmap::$(terraform-bin output -json | jq -r '.aws_auth_configmap.value')"

      - name: Setup kubectl
        if: ${{ steps.terraform-outputs.create != 'true' }}
        run: |
          aws --region=ap-northeast-1 eks update-kubeconfig --name ${{ steps.terraform-outputs.outputs.cluster_id}}

      - name: Apply aws-auth configmap
        if: ${{ steps.terraform-outputs.create != 'true' }}
        run: |
          mkdir temp
          echo ${{ steps.terraform-outputs.outputs.aws_auth_configmap }} | yq e '.data.mapRoles' - > temp/mapRoles
          echo ${{ secrets.DEVELOP_MAPROLES_BASE64 }} | base64 -d >> temp/mapRoles
          echo ${{ secrets.DEVELOP_MAPUSERS_BASE64 }} | base64 -d > temp/mapUsers

          kubectl create -n kube-system configmap aws-auth \
            --from-file=mapRoles=temp/mapRoles \
            --from-file=mapUsers=temp/mapUsers \
            --dry-run=client -oyaml > temp/generated-aws-auth.yaml

          kubectl apply -f temp/generated-aws-auth.yaml
