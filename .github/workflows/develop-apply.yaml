# copied from official tutorial and modified
# https://github.com/hashicorp/learn-terraform-github-actions/blob/48052f810e751fc890454121843449ccdf8d5b1b/.github/workflows/terraform.yml

name: "Develop Apply"

on:
  push:
    branches:
      - main

permissions:
  # for configure-aws-credentials
  id-token: write
  contents: read

defaults:
  run:
    working-directory: clusters/develop

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ap-northeast-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Apply
        run: terraform apply -auto-approve

  mapUsers:
    name: Map Users
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ap-northeast-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Retrieve Terraform outputs
        id: terraform-outputs
        run: |
          echo "::set-output name=create::$(terraform-bin output -json | jq -r '.create.value')"
          echo "::set-output name=cluster_id::$(terraform-bin output -json | jq -r '.cluster_id.value')"
          echo "::set-output name=aws_auth_configmap_base64::$(terraform-bin output -json | jq -r '.aws_auth_configmap.value' | base64 -w 0)"

      - name: Setup kubectl
        if: ${{ steps.terraform-outputs.outputs.create == 'true' }}
        run: |
          aws --region=ap-northeast-1 eks update-kubeconfig --name ${{ steps.terraform-outputs.outputs.cluster_id}}

      - name: Apply aws-auth configmap
        if: ${{ steps.terraform-outputs.outputs.create == 'true' }}
        env:
          AWS_AUTH_CONFIGMAP_BASE64: ${{ steps.terraform-outputs.outputs.aws_auth_configmap_base64 }} 
        run: |
          mkdir temp
          echo $AWS_AUTH_CONFIGMAP_BASE64 | base64 -d | yq e '.data.mapRoles' - > temp/mapRoles
          echo ${{ secrets.DEVELOP_MAPROLES_BASE64 }} | base64 -d >> temp/mapRoles
          echo ${{ secrets.DEVELOP_MAPUSERS_BASE64 }} | base64 -d > temp/mapUsers

          kubectl create -n kube-system configmap aws-auth \
            --from-file=mapRoles=temp/mapRoles \
            --from-file=mapUsers=temp/mapUsers \
            --dry-run=client -oyaml > temp/generated-aws-auth.yaml

          kubectl apply -f temp/generated-aws-auth.yaml

  k8s-resources:
    name: Apply k8s Resources
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ap-northeast-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Retrieve Terraform outputs
        id: terraform-outputs
        run: |
          echo "::set-output name=create::$(terraform-bin output -json | jq -r '.create.value')"
          echo "::set-output name=cluster_id::$(terraform-bin output -json | jq -r '.cluster_id.value')"
          echo "::set-output name=autoscaler_role_arn::$(terraform-bin output -json | jq -r '.autoscaler_role_arn.value')"
          echo "::set-output name=autoscaler_sa_name::$(terraform-bin output -json | jq -r '.autoscaler_sa_name.value')"

      - name: Setup kubectl/helm
        if: ${{ steps.terraform-outputs.outputs.create == 'true' }}
        run: |
          aws --region=ap-northeast-1 eks update-kubeconfig --name ${{ steps.terraform-outputs.outputs.cluster_id}}
          helm repo add autoscaler https://kubernetes.github.io/autoscaler
          helm repo add istio https://istio-release.storage.googleapis.com/charts
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update

      - name: Base Resources
        if: ${{ steps.terraform-outputs.outputs.create == 'true' }}
        run: |
          kubectl apply -f k8s/base/manifests

      - name: Manifests
        if: ${{ steps.terraform-outputs.outputs.create == 'true' }}
        # didn't take a option of committing external manifests/charts into this repo because this is a public repo
        run: |
          # argocd
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/release-2.2/manifests/ha/install.yaml
          # metrics server
          kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml

      - name: Cluster Autoscaler
        if: ${{ steps.terraform-outputs.outputs.create == 'true' }}
        env:
          CLUSTER_NAME: ${{ steps.terraform-outputs.outputs.cluster_id }}
          ROLE_ARN: ${{ steps.terraform-outputs.outputs.autoscaler_role_arn }}
          SA_NAME: ${{ steps.terraform-outputs.outputs.autoscaler_sa_name }}
        run: |
          helm upgrade --install --namespace kube-system cluster-autoscaler autoscaler/cluster-autoscaler \
            -f k8s/cluster-autoscaler/values/cluster-autoscaler.yaml \
            --set awsRegion=ap-northeast-1 \
            --set autoDiscovery.enabled=true \
            --set autoDiscovery.clusterName=$CLUSTER_NAME \
            --set rbac.create=true \
            --set rbac.serviceAccount.name=$SA_NAME \
            --set rbac.serviceAccount.annotations."eks\.amazonaws\.com/role-arn"=$ROLE_ARN

      - name: Monitoring
        if: ${{ steps.terraform-outputs.outputs.create == 'true' }}
        run: |
          helm upgrade --install monitoring prometheus-community/kube-prometheus-stack -n monitoring \
            -f k8s/monitoring/values/monitoring.yaml

      - name: Istio
        if: ${{ steps.terraform-outputs.outputs.create == 'true' }}
        # https://istio.io/latest/docs/setup/install/helm/
        # "This feature is currently considered alpha."
        run: |
          helm upgrade --install istio-base istio/base -n istio-system -f k8s/istio/values/base.yaml
          helm upgrade --install istiod istio/istiod -n istio-system -f k8s/istio/values/istiod.yaml --wait
          helm upgrade --install istio-ingress istio/gateway -n istio-ingress k8s/istio/values/gateway.yaml --wait

      - name: Helm list
        if: ${{ steps.terraform-outputs.outputs.create == 'true' }}
        run: |
          helm list
